import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram import Router

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram
TOKEN = "7971363257:AAFK4jnC0P_ALoyRXpjd0JjtxIRrwI2OakM"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
game_state = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
game_history = {}

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
symbols = {"X": "‚ùå", "O": "‚≠ï", " ": "‚¨ú"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è 3x3
def create_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤
def print_static_board(board):
    lines = []
    for row in board:
        line = " | ".join(symbols[cell] for cell in row)
        lines.append(line)
    fixed_size = "\n-----------\n".join(lines)
    return f"\n{fixed_size}\n"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
def is_winner(board, player):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
    for row in board:
        if all(cell == player for cell in row):
            return True
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞ –≤–Ω–∏—á—å—é
def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–æ–¥–∞ –±–æ—Ç–∞
def bot_move(board, bot_symbol, player_symbol):
    available_moves = [(r, c) for r in range(3) for c in range(3) if board[r][c] == ' ']
    for r, c in available_moves:
        board[r][c] = bot_symbol
        if is_winner(board, bot_symbol):
            return r, c
        board[r][c] = ' '
    for r, c in available_moves:
        board[r][c] = player_symbol
        if is_winner(board, player_symbol):
            board[r][c] = ' '
            return r, c
        board[r][c] = ' '
    return random.choice(available_moves)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
def get_keyboard(board):
    keyboard = []
    for r in range(3):
        row = [InlineKeyboardButton(text=symbols[board[r][c]], callback_data=f"move:{r}:{c}") for c in range(3)]
        keyboard.append(row)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"
    keyboard.append([InlineKeyboardButton(text="üö´ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", callback_data="stop_game")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å –∑–∞ ‚ùå", callback_data="choose_X"),
         InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å –∑–∞ ‚≠ï", callback_data="choose_O")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_game(message: Message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    game_state[message.chat.id] = {
        "board": create_board(),
        "player_symbol": None,
        "bot_symbol": None
    }
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, –∑–∞ –∫–æ–≥–æ –∏–≥—Ä–∞–µ—à—å:", reply_markup=get_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def callback_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    if callback.data == "stop_game":
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—ë –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
        state = game_state.get(chat_id)
        if state:
            result = f"–ò–≥—Ä–∞ {len(game_history.get(chat_id, [])) + 1} - –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞:\n{print_static_board(state['board'])}"
            if chat_id not in game_history:
                game_history[chat_id] = []
            game_history[chat_id].append(result)
            del game_state[chat_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            await callback.message.edit_text("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.", reply_markup=get_menu())
        return
    elif callback.data == "rules":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ X –∏–ª–∏ O. –ò–≥—Ä–∞ –∏–¥–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤. –î–µ–ª–∞–π—Ç–µ —Ö–æ–¥, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.")
    elif callback.data == "history":
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
        if chat_id in game_history and game_history[chat_id]:
            history_text = "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä:\n\n" + "\n\n".join(game_history[chat_id])
            await callback.message.answer(history_text)
        else:
            await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞.")
    elif callback.data.startswith("choose_"):
        # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –∏–≥—Ä–æ–∫–æ–º
        player_symbol = "X" if callback.data == "choose_X" else "O"
        bot_symbol = "O" if player_symbol == "X" else "X"
        game_state[chat_id] = {
            "board": create_board(),
            "player_symbol": player_symbol,
            "bot_symbol": bot_symbol
        }
        state = game_state[chat_id]
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª O, –±–æ—Ç –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥
        if player_symbol == "O":
            bot_r, bot_c = bot_move(state["board"], bot_symbol, player_symbol)
            state["board"][bot_r][bot_c] = bot_symbol
        await callback.message.edit_text(f"–¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ {symbols[state['player_symbol']]}, —è –∑–∞ {symbols[state['bot_symbol']]}\n–¢–≤–æ–π —Ö–æ–¥!", reply_markup=get_keyboard(state["board"]))
    elif callback.data.startswith("move"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
        _, r, c = callback.data.split(":")
        r, c = int(r), int(c)
        state = game_state.get(chat_id)
        if state and state["board"][r][c] == ' ':
            state["board"][r][c] = state["player_symbol"]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
            if is_winner(state["board"], state["player_symbol"]):
                result = f"–ò–≥—Ä–∞ {len(game_history.get(chat_id, [])) + 1} - –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞:\n{print_static_board(state['board'])}"
                if chat_id not in game_history:
                    game_history[chat_id] = []
                game_history[chat_id].append(result)
                await callback.message.edit_text(f"{print_static_board(state['board'])}\n–¢—ã –ø–æ–±–µ–¥–∏–ª!", reply_markup=get_menu())
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞ –≤–Ω–∏—á—å—é
            if is_draw(state["board"]):
                result = f"–ò–≥—Ä–∞ {len(game_history.get(chat_id, [])) + 1} - –ù–∏—á—å—è:\n{print_static_board(state['board'])}"
                if chat_id not in game_history:
                    game_history[chat_id] = []
                game_history[chat_id].append(result)
                await callback.message.edit_text(f"{print_static_board(state['board'])}\n–ù–∏—á—å—è!", reply_markup=get_menu())
                return
            # –•–æ–¥ –±–æ—Ç–∞
            bot_r, bot_c = bot_move(state["board"], state["bot_symbol"], state["player_symbol"])
            state["board"][bot_r][bot_c] = state["bot_symbol"]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –±–æ—Ç
            if is_winner(state["board"], state["bot_symbol"]):
                result = f"–ò–≥—Ä–∞ {len(game_history.get(chat_id, [])) + 1} - –ü–æ–±–µ–¥–∞ –±–æ—Ç–∞:\n{print_static_board(state['board'])}"
                if chat_id not in game_history:
                    game_history[chat_id] = []
                game_history[chat_id].append(result)
                await callback.message.edit_text(f"{print_static_board(state['board'])}\n–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!", reply_markup=get_menu())
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞ –≤–Ω–∏—á—å—é
            if is_draw(state["board"]):
                result = f"–ò–≥—Ä–∞ {len(game_history.get(chat_id, [])) + 1} - –ù–∏—á—å—è:\n{print_static_board(state['board'])}"
                if chat_id not in game_history:
                    game_history[chat_id] = []
                game_history[chat_id].append(result)
                await callback.message.edit_text(f"{print_static_board(state['board'])}\n–ù–∏—á—å—è!", reply_markup=get_menu())
                return
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
            await callback.message.edit_reply_markup(reply_markup=get_keyboard(state["board"]))
    await callback.answer("–Ø —Å—Ö–æ–¥–∏–ª, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
        await asyncio.sleep(0.1)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())